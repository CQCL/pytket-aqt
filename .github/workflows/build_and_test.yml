name: Build and test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - "wheel/**"
      - "runci/**"
  release:
    types:
      - created
      - edited
  schedule:
    # 04:00 every Tuesday morning
    - cron: "0 4 * * 2"

jobs:
  pre-commit:
    name: Run pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version
      - name: Install poetry
        run: |
          pipx install --pip-args=--constraint=${{ github.workspace }}/dev-tool-requirements.txt poetry
          poetry --version
      - name: Compute pre-commit cache key
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys
          import os

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
              github_output.write(f"result={result}")
      - name: Restore pre-commit cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-
      - name: Run pre-commit
        run: |
          poetry install --no-root --only=pre-commit
          poetry sync
          poetry run pre-commit run --all-files --show-diff-on-failure

  aqt-checks:
    name: AQT - Build and test module
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          submodules: true
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*
      - name: Set up Python 3.11
        if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Build and test (3.11)
        if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
        shell: bash
        run: |
          ./.github/workflows/build-test nomypy
      - name: Set up Python 3.12
        if: github.event_name == 'push' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build and test (3.12)
        if: github.event_name == 'push' || github.event_name == 'schedule'
        shell: bash
        run: |
          ./.github/workflows/build-test nomypy
      - uses: actions/upload-artifact@v4
        if: github.event_name == 'release' || contains(github.ref, 'refs/heads/wheel')
        with:
          name: artefact-${{ matrix.os }}
          path: wheelhouse/
      - name: install poetry
        run: pip install poetry
      - name: Install docs dependencies
        if: (matrix.os == 'ubuntu-latest') && (github.event_name == 'pull_request' || github.event_name == 'schedule' )
        run: |
          cd docs
          bash ./install.sh
          for w in `find wheelhouse/ -type f -name "*.whl"` ; do poetry install $w ; done
      - name: Build docs
        if: (matrix.os == 'ubuntu-latest') && (github.event_name == 'pull_request' || github.event_name == 'schedule' )
        timeout-minutes: 20
        run: |
          cd docs
          poetry run bash ./build-docs.sh

  publish_to_pypi:
    name: Publish to pypi
    if: github.event_name == 'release'
    needs: aqt-checks
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels
        # downloading all three files into the wheelhouse
        # all files are identical, so there will only be one file
        uses: actions/download-artifact@v4
        with:
          path: wheelhouse
          pattern: artefact-*
          merge-multiple: true
      - name: Put them all in the dist folder
        run: |
          mkdir dist
          for w in `find wheelhouse/ -type f -name "*.whl"` ; do cp $w dist/ ; done
      - name: Publish wheels
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_PYTKET_AQT_API_TOKEN }}
          verbose: true
